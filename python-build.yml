name: Python CI

on:
  push:
    branches:
      - main  # Aciona o workflow ao realizar push na branch 'main'
  pull_request:
    branches:
      - main  # Aciona o workflow em pull requests para a branch 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Fazer o checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Passo 2: Configurar a versão do Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Substitua pela versão do Python desejada

      # Passo 3: Configurar cache para pip
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Passo 4: Instalar dependências
      - name: Install dependencies
        run: |
          python -m venv venv  # Cria o ambiente virtual
          . venv/bin/activate  # Ativa o ambiente virtual
          pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt  # Instala as dependências listadas no requirements.txt

      # Passo 5: Verificar as dependências instaladas
      - name: Verify installed packages
        run: |
          . venv/bin/activate  # Ativa o ambiente virtual
          pip list  # Lista os pacotes instalados para verificação

      # Passo 6: Executar os testes
      - name: Run tests
        run: |
          . venv/bin/activate  # Ativa o ambiente virtual
          pytest projetodevops/tests/ --maxfail=5 --disable-warnings  # Executa os testes e exibe um número limitado de falhas

      # Passo 7: Salvar resultados de teste como artefatos (opcional)
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: tests/reports/  # Substitua pelo caminho onde os relatórios de teste são gerados